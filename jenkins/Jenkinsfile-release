pipeline {
    agent {label 'master'}
    
    parameters {
        booleanParam(name: 'prepareReleaseNotes', defaultValue: true, description: 'Prepare release notes')
        booleanParam(name: 'publishToNexus', defaultValue: true, description: 'Publish to Nexus')
        booleanParam(name: 'releaseOnGithub', defaultValue: true, description: 'Release on Github')
        booleanParam(name: 'publishToS3', defaultValue: true, description: 'Publish to S3')
        booleanParam(name: 'publishToPiPy', defaultValue: true, description: 'Publish to PiPy')
    }

    environment {
        SPARK_VERSION="2.2.1"
        SPARK_HOME="${env.WORKSPACE}/spark"
        JAVA_HOME="${JAVA_HOME_8}"
        PATH="${JAVA_HOME_8}/bin:${PATH}"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                sh  """
                        rm -rf *
                    """
            }
        }

        stage('Download Spark') {
            steps {
                sh  """
                        wget -q "http://mirrors.ocf.berkeley.edu/apache/spark/spark-${env.SPARK_VERSION}/spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz"
                        mkdir -p "${env.SPARK_HOME}"
                        tar zxvf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz -C "${env.SPARK_HOME}" --strip-components 1
                        rm -rf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz
                    """
            }
        }


        stage('Clone the repository'){
            steps{
                    checkout scm
                }
        }

        stage ('Prepare release notes'){
            when {
                expression { params.prepareReleaseNotes == true }
            }
            steps {
                    sh """
                    sed -i.backup -E "s/\\.[0-9]+-SNAPSHOT/.\$(( $BUILD_NUMBER - 1 ))/" gradle.properties
                    REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                    git checkout -- gradle.properties

                    # Get id of this release
                    jira_version_id=\$(curl --silent "https://0xdata.atlassian.net/rest/api/2/project/SW/versions" | tr '}' '\\n' | grep "\\"name\\":\\"\$REL_VERSION\\"" | cut -d'"' -f8)
                    # Get the JIRA page (currently, there is no endpoint for release notes)
                    release_notes_page="https://0xdata.atlassian.net/secure/ReleaseNote.jspa?projectId=12000&version=\${jira_version_id}"
                    
                    # Obtain the release notes and process them so they look like we expect
                    curl --silent "\$release_notes_page" | sed '/<body>/,/<a name="editarea"><\\/a>/!d;//D' | sed 's/<ul>//' | sed 's/<\\/ul>//' | sed 's/ *<h2>/-  /' | sed 's/<\\/h2>//'  | sed 's/<\\/li>//' | sed "s/ *<li>\\[<a href='https:\\/\\/0xdata.atlassian.net\\/browse\\/SW-\\([0-9]*\\)'>SW-[0-9]*<\\/a>\\]/\\   -  \\`SW-\\1 <https:\\/\\/0xdata.atlassian.net\\/browse\\/SW-\\1>\\`__/" | sed '\$ d' | sed '1d' > release_notes
                    
                    # Put the release notes into the doc/CHANGELOG.rst
                    
                    release_date=\$(date +%Y-%m-%d)
                    rel_prefix=\$(echo "v\$REL_VERSION (\$release_date)")
                    underscores=\$(head -c \${#rel_prefix} < /dev/zero | tr '\\0' '-')
                    download_line="Download at: \\`http://h2o-release.s3.amazonaws.com/sparkling-water/${env.BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/index.html <http://h2o-release.s3.amazonaws.com/sparkling-water/${env.BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/index.html>\\`__"

                    # Release notes
                    echo \$rel_prefix
                    echo \$underscores
                    echo
                    cat release_notes
                   
                    # Insert release info
                    sed -i "4i \$rel_prefix" doc/CHANGELOG.rst
                    
                    # Insert the underscores
                    sed -i "5i \$underscores" doc/CHANGELOG.rst
                    
                    # Insert the download link
                    sed -i "6i \$download_line" doc/CHANGELOG.rst
                    
                    # Insert the release notes
                    sed -i "6r release_notes" doc/CHANGELOG.rst
                    
                    rm -rf release_notes
                    git add doc/CHANGELOG.rst
                    git commit -m "Release notes for \$REL_VERSION"
                    git push --set-upstream origin ${env.BRANCH_NAME}              
                    """
            }
        }

        stage('Build Sparkling Water'){
            steps {
                sh  """
                        # Calculate the current and future version
                        sed -i.backup -E "s/\\.[0-9]+-SNAPSHOT/.\$(( $BUILD_NUMBER - 1 ))/" gradle.properties
                        REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                        NEW_VERSION=`echo "\$REL_VERSION" | sed -E "s/\\.[0-9]+\$/.$BUILD_NUMBER-SNAPSHOT/"`
                                             
                        echo
                        echo "RELEASE VERSION: \${REL_VERSION}"
                        echo "NEW VERSION: \${NEW_VERSION}"
                        echo
                        
                        # Fetch H2O python package
                        mkdir -p private/
                        curl \$(./gradlew -q printH2OWheelPackage ) > private/h2o.whl
                        export H2O_PYTHON_WHEEL="\$(pwd)/private/h2o.whl"
                        
                        # Perform a build
                        ./gradlew build -x check
                        ./gradlew buildSparklingWaterDist
                    """
            }
        }

        stage('Publish to Nexus'){
            when {
                expression { params.publishToNexus == true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "PUBLIC_NEXUS", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD'),
                                 usernamePassword(credentialsId: "SIGNING_KEY", usernameVariable: 'SIGN_KEY', passwordVariable: 'SIGN_PASSWORD'),
                                 file(credentialsId: 'release-secret-key-ring-file', variable: 'RING_FILE_PATH')]) {
                    sh """
                            # Publish to NEXUS
                            ./gradlew -Porg.gradle.daemon=false -PnexusUsername=${NEXUS_USERNAME} -PnexusPassword=${NEXUS_PASSWORD} -Psigning.keyId=${SIGN_KEY} -Psigning.secretKeyRingFile=${RING_FILE_PATH} -Psigning.password= -PdoRelease publish -x check
                        """
                }
            }
        }

        stage('Release on Github'){
            when {
                expression { params.releaseOnGithub == true }
            }
            steps {
                sh  """
                    REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                    NEW_VERSION=`echo "\$REL_VERSION" | sed -E "s/\\.[0-9]+\$/.$BUILD_NUMBER-SNAPSHOT/"`
                         
                    # Create Release tag on Github
                    ./gradlew -Porg.gradle.daemon=false -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=\${REL_VERSION} -Prelease.newVersion=\${NEW_VERSION} -PdoRelease release -x check
                    # Note: 
                    # After this step, gradle.properties has the new future version ending with "-SNAPSHOT" so
                    # we change it back to the version of the current release in case the following stages
                    # require to use the correct version
                      
                    sed -i.backup -E "s/\\.[0-9]+-SNAPSHOT/.\$(( $BUILD_NUMBER - 1 ))/" gradle.properties
                    """
            }
        }

        stage('Create Extended H2O Jars'){
            steps {
                sh  """
                    # Create extended H2O jar for all supported hadoop distributions
                    HADOOP_DISTRIBUTIONS=`./gradlew -q :sparkling-water-assembly-h2o:printHadoopDistributions)`
                    for distro in \${HADOOP_DISTRIBUTIONS}
                    do
                      ./gradlew extendJar -PdownloadH2O="\${distro}"
                    done
                    # Create extended H2O jar also for the regular h2o (no H2O driver)
                    ./gradlew extendJar -PdownloadH2O
                    """
            }
        }

        stage('Publish to S3') {
            when {
                expression { params.publishToS3 == true }
            }
            steps {
                sh  """
                    s3cmd --rexclude='target/classes/*' --acl-public sync dist/build/ s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/
                    
                    echo EXPLICITLY SET MIME TYPES AS NEEDED
                    list_of_html_files=`find dist/build -name '*.html' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_html_files}
                    for f in \${list_of_html_files}
                    do
                        s3cmd --acl-public --mime-type text/html put dist/build/\${f} s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/\${f}
                    done
                    
                    list_of_js_files=`find dist/build -name '*.js' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_js_files}
                    for f in \${list_of_js_files}
                    do
                        s3cmd --acl-public --mime-type text/javascript put dist/build/\${f} s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/\${f}
                    done
                    
                    list_of_css_files=`find dist/build -name '*.css' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_css_files}
                    for f in \${list_of_css_files}
                    do
                        s3cmd --acl-public --mime-type text/css put dist/build/\${f} s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/\${f}
                    done
                    
                    list_of_extended_jars=`find assembly-h2o/private -name '*-extended.jar' | sed 's/assembly-h2o\\\\/private\\\\///g'`
                    echo \${list_of_extended_jars}
                    for jar in \${list_of_extended_jars}
                    do
                         s3cmd --acl-public put assembly-h2o/private/\${jar} s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$(( $BUILD_NUMBER - 1 ))/\${jar}
                    done
                    ./gradlew :sparkling-water-assembly-h2o:clean
                    ./gradlew :sparkling-water-assembly-h2o:cleanH2OJars
                    
                    echo UPDATE LATEST POINTER
                    tmpdir=./buildsparklingwater.tmp
                    mkdir -p \${tmpdir}
                    echo \$(( $BUILD_NUMBER - 1 )) > \${tmpdir}/latest
                    echo "<head>" > \${tmpdir}/latest.html
                    echo "<meta http-equiv=\\"refresh\\" content=\\"0; url=\$(( $BUILD_NUMBER - 1 ))/index.html\\" />" >> \${tmpdir}/latest.html
                    echo "</head>" >> \${tmpdir}/latest.html
                    s3cmd --acl-public put \${tmpdir}/latest s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest
                    s3cmd --acl-public put \${tmpdir}/latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest.html
                    s3cmd --acl-public put \${tmpdir}/latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/index.html
                    """
            }
        }

        stage('Publish To PyPi') {
            when {
                expression { params.publishToPiPy == true }
            }
            steps {
                dir("py/build/pkg") {
                    withCredentials([usernamePassword(credentialsId: "pypi-credentials", usernameVariable: 'PIPY_USERNAME', passwordVariable: 'PIPY_PASSWORD')]) {
                        sh  """
                            python setup.py sdist
                            twine upload dist/* -u $PIPY_USERNAME -p $PIPY_PASSWORD
                            """
                    }
                }
            }
        }
        
    }
}